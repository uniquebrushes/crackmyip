/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IpDetails } from "./IpDetails";
import { IpDetailsCountArgs } from "./IpDetailsCountArgs";
import { IpDetailsFindManyArgs } from "./IpDetailsFindManyArgs";
import { IpDetailsFindUniqueArgs } from "./IpDetailsFindUniqueArgs";
import { CreateIpDetailsArgs } from "./CreateIpDetailsArgs";
import { UpdateIpDetailsArgs } from "./UpdateIpDetailsArgs";
import { DeleteIpDetailsArgs } from "./DeleteIpDetailsArgs";
import { IpDetailsService } from "../ipDetails.service";
@graphql.Resolver(() => IpDetails)
export class IpDetailsResolverBase {
  constructor(protected readonly service: IpDetailsService) {}

  async _ipDetailsItemsMeta(
    @graphql.Args() args: IpDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IpDetails])
  async ipDetailsItems(
    @graphql.Args() args: IpDetailsFindManyArgs
  ): Promise<IpDetails[]> {
    return this.service.ipDetailsItems(args);
  }

  @graphql.Query(() => IpDetails, { nullable: true })
  async ipDetails(
    @graphql.Args() args: IpDetailsFindUniqueArgs
  ): Promise<IpDetails | null> {
    const result = await this.service.ipDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IpDetails)
  async createIpDetails(
    @graphql.Args() args: CreateIpDetailsArgs
  ): Promise<IpDetails> {
    return await this.service.createIpDetails({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IpDetails)
  async updateIpDetails(
    @graphql.Args() args: UpdateIpDetailsArgs
  ): Promise<IpDetails | null> {
    try {
      return await this.service.updateIpDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IpDetails)
  async deleteIpDetails(
    @graphql.Args() args: DeleteIpDetailsArgs
  ): Promise<IpDetails | null> {
    try {
      return await this.service.deleteIpDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
