/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, IpDetails as PrismaIpDetails } from "@prisma/client";

export class IpDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IpDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ipDetails.count(args);
  }

  async ipDetailsItems(
    args: Prisma.IpDetailsFindManyArgs
  ): Promise<PrismaIpDetails[]> {
    return this.prisma.ipDetails.findMany(args);
  }
  async ipDetails(
    args: Prisma.IpDetailsFindUniqueArgs
  ): Promise<PrismaIpDetails | null> {
    return this.prisma.ipDetails.findUnique(args);
  }
  async createIpDetails(
    args: Prisma.IpDetailsCreateArgs
  ): Promise<PrismaIpDetails> {
    return this.prisma.ipDetails.create(args);
  }
  async updateIpDetails(
    args: Prisma.IpDetailsUpdateArgs
  ): Promise<PrismaIpDetails> {
    return this.prisma.ipDetails.update(args);
  }
  async deleteIpDetails(
    args: Prisma.IpDetailsDeleteArgs
  ): Promise<PrismaIpDetails> {
    return this.prisma.ipDetails.delete(args);
  }
}
